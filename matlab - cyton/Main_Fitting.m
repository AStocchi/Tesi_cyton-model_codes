close all
clear all
clc

%%%pseudo-codice di fitting:
%lancio fun_lettura_dati
%definizione dei parametri del modello
    %lancio fun_cyton_per_fit
    %valuto il modello
    %->ripeti->

tic

%utilizzo dei dati iniziali presi dal paper cyton-2011
smooth_data = Fun_lettura_dati();
F_N0 = 2.5765;

%utilizzo dati kajal_all_pedigree
%load('./dati kajal/5_worst_dati_campionati_tempi_corretti.mat')
%smooth_data = campioni;
%F_N0 = 5;

%% definisco intervalli della grid-search
i_g0 = 0.1:0.1:1;
i_m = 1:1.5:10;
i_s_a = 0.4:0.15:0.9;
i_s_b = 1:0.4:3;
i_s = cat(2,i_s_a,i_s_b);

%% prova "breve"
i_g0 = 0.5:0.5:1;
i_m = 4:1:5;
i_s = 1:1:2;
%PER LA PRIMA GRID SEARCH: F_mdn, F_sdn sono definiti uguali a F_md0, F_sd0 (per ridurre il tempo computazionale)

%%%tempo di esecuzione per spazio degli di dimensione 128 -> Elapsed time is (seconds) 1066.81 [alla seconda run ci ha messo solo 812 sec.]
%-> tempo medio per ogni simulazione è: 1066/128 = 8.34 sec.

%ottenuto valore minimo di 29.8 
%arg-min: [0.5 5 2 5 2 5 2]
%-> il vettore degli score è : result = [0;29.8092557789417;29.8583006629887;29.8651814811169;29.8924312455007;30.1694777016109;30.3427824589077;30.3796955867328;30.5196681671680;30.5992393275052;30.7647364790952;30.7762616227624;30.9723090765653;31.1282769141048;31.2098562601536;31.2165078189626;31.2946064455230;31.4802734821872;31.7297429278818;31.8066200640321;31.8468472658848;31.8993493442699;31.8997114461323;31.9091619855779;31.9868923395692;31.9943122125905;31.9966015606006;32.0552394691676;32.0689647248388;32.1088435092786;32.1293472500049;32.1611014474738;32.2815118891487;32.2894233958619;32.2963351754230;32.3202470650500;32.3938956299412;32.4802561723776;32.5023818244886;32.5694585787222;32.7116839557636;32.7396889487296;32.8811811878082;32.9324031685292;33.0515267163003;33.0560966398726;33.0746177976507;33.1046716178071;33.1294681593884;33.1428847811138;33.1467915764218;33.1681891908963;33.1898102464148;33.2031915176021;33.2164376441562;33.2186855710129;33.2342281544942;33.2542295113617;33.2964294577856;33.2967976680345;33.3434406114545;33.3510803852279;33.3910491376782;33.3916382875308;33.3936270157471;33.4227638702692;33.4350186211949;33.4455382249502;33.4615949489589;33.4763572793192;33.4771453287307;33.4809171155530;33.5068406254775;33.5553494747079;33.5659811448894;33.5797428960576;33.6124742592219;33.6525987009040;33.6686386497323;33.6874866320364;33.7003507566760;33.7041121473416;33.7878142434626;33.7991866912367;33.8161740591939;33.8868003472885;33.8904597628031;33.9457220252456;34.0596733945396;34.0661714341830;34.0750837876839;34.0990607047361;34.2176577853170;34.3593229970918;34.3628911956440;34.4193057414586;34.4873190953808;34.5945484048046;34.7180586772133;34.7447719603348;34.7910526758206;35.0697011130751;35.6938122200863;35.7414465540992;35.8552796840644;35.9568663201904;36.1343839031072;36.4669240726353;36.5506179563000;37.3918583875116;37.4789906659014;37.8405107776469;38.1428745506504;38.1753674374973;38.1785413650261;38.8653751825638;39.2425695453468;39.4901945412734;39.7551145738053;40.9772652545318;40.9966423524915;41.5391855937454;42.9085675581390;44.5876809754170;45.9132842158806;45.9865205741541;47.3589289496271;51.6848050908270;55.7920242933880]

%tempo 53.5 secondi (usando copy_of_cyton..)  --> passiamo a copy_of_cyton!!
%result = [0;29.8092557789417;29.8583006629887;29.8651814811169;29.8924312455007;30.1694777016109;30.3427824589077;30.3796955867328;30.5196681671680;30.5992393275052;30.7647364790952;30.7762616227624;30.9723090765653;31.1282769141048;31.2098562601536;31.2165078189626;31.2946064455230;31.4802734821872;31.7297429278818;31.8066200640321;31.8468472658848;31.8993493442699;31.8997114461323;31.9091619855779;31.9868923395692;31.9943122125905;31.9966015606006;32.0552394691676;32.0689647248388;32.1088435092786;32.1293472500049;32.1611014474738;32.2815118891487;32.2894233958619;32.2963351754230;32.3202470650500;32.3938956299412;32.4802561723776;32.5023818244886;32.5694585787222;32.7116839557636;32.7396889487296;32.8811811878082;32.9324031685292;33.0515267163003;33.0560966398726;33.0746177976507;33.1046716178071;33.1294681593884;33.1428847811138;33.1467915764218;33.1681891908963;33.1898102464148;33.2031915176021;33.2164376441562;33.2186855710129;33.2342281544942;33.2542295113617;33.2964294577856;33.2967976680345;33.3434406114545;33.3510803852279;33.3910491376782;33.3916382875308;33.3936270157471;33.4227638702692;33.4350186211949;33.4455382249502;33.4615949489589;33.4763572793192;33.4771453287307;33.4809171155530;33.5068406254775;33.5553494747079;33.5659811448894;33.5797428960576;33.6124742592219;33.6525987009040;33.6686386497323;33.6874866320364;33.7003507566760;33.7041121473416;33.7878142434626;33.7991866912367;33.8161740591939;33.8868003472885;33.8904597628031;33.9457220252456;34.0596733945396;34.0661714341830;34.0750837876839;34.0990607047361;34.2176577853170;34.3593229970918;34.3628911956440;34.4193057414586;34.4873190953808;34.5945484048046;34.7180586772133;34.7447719603348;34.7910526758206;35.0697011130751;35.6938122200863;35.7414465540992;35.8552796840644;35.9568663201904;36.1343839031072;36.4669240726353;36.5506179563000;37.3918583875116;37.4789906659014;37.8405107776469;38.1428745506504;38.1753674374973;38.1785413650261;38.8653751825638;39.2425695453468;39.4901945412734;39.7551145738053;40.9772652545318;40.9966423524915;41.5391855937454;42.9085675581390;44.5876809754170;45.9132842158806;45.9865205741541;47.3589289496271;51.6848050908270;55.7920242933880]


%% prova "media"  %dimensione = 3^7 = 2187 -> circa 36 min (?)
% i_g0 = [0.2 0.4 0.7]
% i_m = [3 4.5 7]
% i_s = [0.3 0.8 1.3 1.8]

%%%risultati (con copy_of_cyton..) : [0;22.8509746533777;23.5333418200453;24.0620979813899;24.2413910118642;24.5794803332172;24.8636135956219;24.9127183752591;24.9959150272628;25.0400241068823;25.1062896134357;25.1568848729279;25.2837916803995;25.3138568585222;25.4236512788350;25.4561451548417;25.5595265968760;25.6758590417073;25.7023499740802;25.7078778296941;25.8525101534590;25.8547351537131;25.8549763793194;25.9835656470813;26.0100724730065;26.0554760109070;26.0759001358510;26.1691703548868;26.2420919683971;26.2584784164871;26.3080383146226;26.3324792385862;26.3552525978965;26.3554578603188;26.3627941736637;26.4270488701193;26.4277191790493;26.4288753110691;26.4628673089244;26.4859147801286;26.5639288095451;26.6148807731192;26.6329714123464;26.6575283340166;26.6632574360348;26.7782820759158;26.7911455530229;26.8226149894358;26.8749019416867;26.8855828088696;26.9129460539398;26.9233981830559;26.9650163666200;26.9833559972550;26.9899503000800;27.0386445342925;27.0475330735299;27.0574050027067;27.1247472832774;27.1674881138725;27.1792851109700;27.1995014383632;27.2556187184264;27.3036842546288;27.3060677947384;27.3567482847093;27.3618772975174;27.4078600452441;27.4308130853328;27.4466322537989;27.5163464759469;27.5299695320086;27.5582119570339;27.5687400013307;27.5818955358071;27.6534798856390;27.6696690995274;27.6844940018657;27.6893101709673;27.6925729239179;27.7143494828163;27.7538539869472;27.7761907580865;27.7948118266149;27.8791808906511;27.8851616860214;27.8915759470621;27.8964401005652;27.9048999859005;27.9146326240428;28.0286260278508;28.0573535779488;28.0613513980438;28.1701867760211;28.2053519385379;28.2204214135434;28.2369912221521;28.2415877870858;28.2438115176491;28.2572784003426;28.3064761976151;28.3393532060710;28.3564446144688;28.5404118488360;28.5691371449826;28.6985214799668;28.7083188548183;28.7149101016434;28.7234158454846;28.7534318045550;28.8046465424354;28.8129251877201;28.8267886372741;28.8601828132246;28.8831706746107;28.9654003049499;29.0865183620536;29.1052682301941;29.1246829545554;29.1286810744945;29.1577769590013;29.1718459373665;29.1837959656883;29.2194014681103;29.2426723127880;29.2431893392873;29.2501216458133;29.3162852809852;29.3336874567712;29.4182249642113;29.4519053129482;29.4959235629685;29.5570179134653;29.5663970547315;29.5838187774412;29.5882404349143;29.6277170976771;29.6491923247288;29.7363209631458;29.7906277301951;29.8296242600285;29.8736590527110;29.8931987221729;29.9174308295316;29.9483288942786;29.9510129693278;29.9635629801237;29.9731716831257;29.9829493382604;30.0269469594071;30.0824526702400;30.0901418835183;30.0969656943909;30.1137690320704]
%arg-min: [0.4, 7, 1.8, 7, 0.8, 4.5, 0.3]
%tempo: 1896 sec. --> 31,6 min

%% prova "media 2"  %dimensione = 3^4*4^3 = 5184 -> 
% i_g0 = [0.3 0.45 0.7]
% i_m = [4 5.5 7]
% i_s = [0.4 0.9 1.4 2]

%%%risultati (con copy_of_cyton..) : [22.8405660694540;23.3977692312582;23.4964585609933;23.5649833132366;23.9852077957738;24.0294976720416;24.1079348154234;24.1795286717024;24.2256035750849;24.2852759433716;24.3466226017397;24.4652257886035;24.4925121073558;24.5012354359482;24.5520649600337;24.5581370964064;24.6806531709930;24.8196411909789;24.8656173304888;24.9029061005043;24.9148726368126]
%arg-min: [0.7, 5.5, 1.4, 7, 0.4, 4, 0.4]
%tempo: 1938 sec. -> 32,3 min

%% prova "media 3"  %dimensione = 3*4^6 = 12288 -> 
% i_g0 = [0.35 0.6 0.85]
% i_m = [2 4 6 7.5]
% i_s = [0.4 0.9 1.5 2.2]

%%%risultati (con copy_of_cyton..) : [19.5184161600638;19.6817562065093;20.5912771709486;20.6708239830902;21.1241864735184;21.2985646367767;21.5417024618170;21.6244768509358;21.6290682735316;21.7686710795032;21.8924886048422;21.9430165009230;21.9795525445805;22.0637208716272;22.1394977873441;22.3025468544559;22.3025730971402;22.4283695818943;22.5555811839360;22.6361792062427;22.6788463183742;22.6862103338997;22.7795469119184;22.8579053558641;22.9585552291295]
%arg-min: [0.850000000000000,6,0.900000000000000,7.50000000000000,0.900000000000000,4,0.900000000000000]
%tempo: 4664 sec. -> 77,7 min

%% prova "media 4"  %dimensione = 3*4^6 = 12288 -> 
i_g0 = [0.35 0.6 0.85]
i_m = [1 3 5 8]
i_s = [0.4 0.9 1.5 2.2]

%%%risultati (con copy_of_cyton..) : [26.3877778256075;26.7327645404341;26.9755012403070;27.0245942844441;27.1470532276395;27.2182623704295;27.3248715853256;27.3787895491906;27.5314794537956;27.6088318273059;27.7558086211807;27.8314849521116;27.8494893773551;27.8735811709596;27.9223111939944;27.9563867659753]
%arg-min: [0.350000000000000,8,2.20000000000000,8,2.20000000000000,5,0.400000000000000]
%tempo: 5203 sec.


%vettore dei contatori  %-> F_g0, F_md0, F_sd0, F_mb0, F_sb0, F_mbn, F_sbn
v_counter = ones(7,1);

%matrice degli score:
m_score = zeros(1,8);

%variabile che definisce quale parametro sta variando in quel momento
token = 1;

while v_counter(7)<=length(i_s)
    %definisco i parametri da passare al modello
    F_g0= i_g0(v_counter(1)); 
    F_md0=i_m(v_counter(2));
    F_sd0=i_s(v_counter(3));
    F_mb0=i_m(v_counter(4));
    F_sb0=i_s(v_counter(5));
    F_mbn=i_m(v_counter(6));
    F_sbn=i_s(v_counter(7));
    
    %lancio cyton
    [x_return, ncell_return,] = Copy_of_Fun_cyton_per_fit(F_N0, F_g0, F_md0, F_sd0, F_md0, F_sd0, F_mb0, F_sb0, F_mbn, F_sbn);

    %evaluation 
    score = Fun_evaluation_fit(smooth_data, x_return, ncell_return);
    %salvataggio score cyton
    m_score(end+1,:) = [i_g0(v_counter(1)), i_m(v_counter(2)), i_s(v_counter(3)), i_m(v_counter(4)), i_s(v_counter(5)), i_m(v_counter(6)), i_s(v_counter(7)), score];
    
    %aggiornamento della variabili della grid-search (con relativo update a cascata -nel while)
    v_counter(token) = v_counter(token)+1;
    flag_pass = 1;
    while flag_pass
        flag_pass = 0;
        %serie di tre if che potevano essere scritti come if A | B | C (ho evitato per questioni di leggibilità)
        if token==1 & v_counter(token) > length(i_g0)
            v_counter(token) = 1;  %reset del counter di quella variabile
            token = token +1;  %passo alla variabile successiva e la aggiorno
            v_counter(token) = v_counter(token)+1;
            flag_pass = 1;
        end
        if (token == 2 | token == 4 | token == 6) & v_counter(token) > length(i_m)
            v_counter(token) = 1;
            token = token +1;
            v_counter(token) = v_counter(token)+1;
            flag_pass = 1;
        end
        if (token == 3 | token == 5 | token == 7) & v_counter(token) > length(i_s)
            if token ~= 7
                v_counter(token) = 1;  
                token = token +1; 
                v_counter(token) = v_counter(token)+1;
                flag_pass = 1;
            else
                flag_pass = 0;  %entro qui quando sono all'ultimo valore della grid search -> forzo l'uscita dal ciclo
            end
            
        end
    end
    token = 1;
end

toc

token
